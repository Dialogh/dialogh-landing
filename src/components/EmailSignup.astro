---
import ScrollDownButton from "./ScrollDownButton.astro";
import LineImg from "../assets/images/line.webp";
import { Image } from "astro:assets";
---

<div class="max-w-md mx-auto text-center relative z-10 px-4 mb-4">
  <h1 class="text-2xl sm:text-3xl md:text-4xl mb-4">
    dialogh is <span class="evolving-text relative"
      >evolving <Image
        src={LineImg}
        class="absolute -bottom-1 left-2 sm:left-4 md:left-6 w-auto h-auto"
        alt=""
      /></span
    >
  </h1>

  <p
    class="text-sm sm:text-base md:text-lg lg:text-xl max-w-xs sm:max-w-sm md:max-w-md text-primary/70 mb-6 sm:mb-8 mx-auto"
  >
    A space rebuilt with intention.. for the people who made it what it was.
  </p>

  <form
    class="flex flex-row gap-2 sm:gap-3 max-w-xs sm:max-w-xl md:max-w-lg mx-auto bg-primary/10 rounded-full p-1.5"
    name="register"
    id="registerForm"
  >
    <input
      type="text"
      placeholder="Enter Your Email/Discord Id"
      class="flex-1 lg:px-3 sm:px-0 py-1 sm:py-1 text-sm sm:text-base rounded-full focus:outline-none"
      name="data"
      required
    />
    <button
      type="submit"
      class="block px-2 text-sm sm:text-base transition-colors bg-primary text-secondary rounded-full"
    >
      Get Notified
    </button>
  </form>
</div>

<style>
  input::placeholder {
    opacity: 0.7;
  }

  button {
    white-space: nowrap;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("registerForm") as HTMLFormElement;

    form?.addEventListener("submit", async function (e) {
      e.preventDefault(); // Prevent the default form submission

      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      const originalText = submitButton?.textContent || "Get Notified";

      // Show loading state
      if (submitButton) {
        submitButton.textContent = "Submitting...";
        submitButton.disabled = true;
      }

      try {
        const formData = new FormData(form);

        const response = await fetch("/api/submit", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (response.ok && result.success) {
          alert(result.message || "Successfully submitted!");
          form.reset(); // Clear the form
        } else {
          alert(result.error || "Failed to submit. Please try again.");
        }
      } catch (error) {
        console.error("Submission error:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Unknown error occurred";
        alert("Failed to submit: " + errorMessage);
      } finally {
        // Restore button state
        if (submitButton) {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      }
    });
  });
</script>
