---
// Toast component for displaying notifications
---

<div
  id="toast-container"
  class="fixed top-6 right-6 z-[9999] flex flex-col gap-3 pointer-events-none sm:top-6 sm:right-6 sm:left-auto left-4"
>
  <!-- Toast messages will be dynamically inserted here -->
</div>

<style is:inline>
  /* Animation improvements */
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .toast.show {
    animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateX(0);
  }

  .toast.hiding {
    animation: slideOutRight 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateX(100%);
  }
  .toast {
    pointer-events: auto;
  }
</style>

<script>
  // Toast functionality
  interface ToastOptions {
    type?: "success" | "error" | "info";
    title?: string;
    message: string;
    duration?: number;
    showClose?: boolean;
  }

  class ToastManager {
    private container: HTMLElement | null = null;
    private toastCounter = 0;

    constructor() {
      this.container = document.getElementById("toast-container");
    }

    show(options: ToastOptions) {
      if (!this.container) return;

      const {
        type = "info",
        title,
        message,
        duration = 5000,
        showClose = true,
      } = options;

      const toastId = `toast-${++this.toastCounter}`;

      // Create toast element
      const toast = document.createElement("div");
      toast.id = toastId;

      const baseClasses =
        "toast flex items-center gap-3 w-full sm:min-w-[320px] max-w-[420px] bg-secondary text-primary py-2 px-5 rounded-2xl  border border-primary/10 font-display transform translate-x-full transition-transform duration-400 ease-in-out";

      const iconTypeClasses = {
        success: "text-green-500",
        error: "text-red-400",
        info: "text-blue-500",
      };

      toast.className = `${baseClasses} `;

      // Create icon based on type
      const icon = this.getIcon(type);

      // Create content
      const content = `
        <div class="flex-shrink-0 w-5 h-5 ${iconTypeClasses[type]}">${icon}</div>
        <div class="flex-1">
          ${
            title
              ? `<div class="font-medium text-sm leading-5 mb-0.5">${title}</div>`
              : ""
          }
          <div class="text-xs leading-4 opacity-80 font-normal">${message}</div>
        </div>
        ${
          showClose
            ? `<div class="toast-close flex-shrink-0 w-5 h-5 cursor-pointer opacity-60 hover:opacity-100 hover:bg-black/5 hover:scale-110 transition-all duration-200 ease-in-out text-lg leading-none flex items-center justify-center rounded-full" data-toast-id="${toastId}">&times;</div>`
            : ""
        }
      `;

      toast.innerHTML = content;

      // Add close event listener
      if (showClose) {
        const closeBtn = toast.querySelector(".toast-close");
        if (closeBtn) {
          closeBtn.addEventListener("click", () => this.hide(toastId));
        }
      }

      // Add to container
      this.container.appendChild(toast);

      // Trigger show animation
      setTimeout(() => {
        toast.classList.add("show");
        toast.classList.remove("translate-x-full");
      }, 10);

      // Auto-hide after duration
      if (duration > 0) {
        setTimeout(() => this.hide(toastId), duration);
      }
    }

    hide(toastId: string) {
      const toast = document.getElementById(toastId);
      if (toast) {
        toast.classList.add("hiding");
        toast.classList.remove("show");
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }

    private getIcon(type: string): string {
      switch (type) {
        case "success":
          return `<svg viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>`;
        case "error":
          return `<svg viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>`;
        case "info":
        default:
          return `<svg viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
          </svg>`;
      }
    }
  }

  // Initialize toast manager globally
  declare global {
    interface Window {
      toastManager: ToastManager;
      showToast: (options: ToastOptions) => void;
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    window.toastManager = new ToastManager();
    window.showToast = (options: ToastOptions) => {
      window.toastManager.show(options);
    };
  });
</script>
